// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vendor {
  //* pk
  id                 Int        @id @default(autoincrement())
  pinCode            String
  brandName          String
  ownerName          String
  foodType           FoodType[]
  email              String     @unique
  password           String
  salt               String
  phone              String
  address            String?
  isServiceAvailable Boolean?   @default(true)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  rating             Int        @default(0)

  //* each vendor has one or more cover images
  coverImages VendorImage[]

  //* vendor can servce many meals 
  meals Meal[]
}

model Meal {
  id            Int          @id @default(autoincrement())
  mealName      String
  rating        Int?
  timeToBeReady Int
  category      FoodCategory
  type          FoodType

  //* each meal has one or more image
  images MealImage[]

  //* each vendor has one or more meals
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendorId Int
}

model Order {
  id          Int      @id @default(autoincrement())
  code        Int      @unique
  orderStatus Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  totalPrice  Float

  // an order is orderd by only one customer, and it must be related to a customer or there is no order in my db
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // order has one or more meals
  orderedMeal OrderedMeal[]
}

model OrderedMeal {
  id     Int @id @default(autoincrement())
  mealId Int @unique
  units  Int @default(1)

  orderId Int
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Customer {
  id         Int     @id @default(autoincrement())
  username   String
  email      String  @unique
  password   String
  salt       String
  otp        Int
  otp_expiry BigInt // i will store the milleseconds here and conert it to Date using new Date().setTime(otp_expiry) method in my service logic
  phone      String
  isVerified Boolean @default(false)
  //* customer can create many orders 
  order      Order[]
}

model VendorImage {
  id        Int      @id @default(autoincrement())
  // vendor can has many cover images
  Vendor    Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MealImage {
  id     Int   @id @default(autoincrement())
  price  Float
  //* one mael can has many images 
  meal   Meal  @relation(fields: [mealId], onDelete: Cascade, references: [id], onUpdate: Cascade)
  mealId Int
}

enum FoodType {
  VEG
  NON_VEG
}

enum FoodCategory {
  BREAKFAST
  LAUNCH
  DINNER
}
